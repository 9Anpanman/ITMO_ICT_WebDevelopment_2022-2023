{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u043d\u0434\u0440\u0430\u0442\u044c\u0435\u0432\u0430 \u0410\u043b\u0435\u043a\u0441\u0435\u044f K33412","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33412","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u043d\u0434\u0440\u0430\u0442\u044c\u0435\u0432\u0430 \u0410\u043b\u0435\u043a\u0441\u0435\u044f K33412"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py \u0421\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0436\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0435\u043c\u0443 \u043f\u0440\u0438\u0432\u0435\u0442 import socket , time sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 9090 )) sock . listen ( 1 ) sock . setblocking ( False ) print ( \"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \\n \u0421\u0435\u0440\u0432\u0435\u0440 \u0436\u0434\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\" ) while True : try : clientsocket , address = sock . accept () data = clientsocket . recv ( 16384 ) udata = data . decode ( \"utf-8\" ) print ( udata ) HDRS = 'HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n ' msg = 'Hello, client' . encode ( 'utf-8' ) clientsocket . send ( HDRS . encode ( 'utf-8' ) + msg ) sock . close () break except socket . error : print ( \"\u0416\u0434\u0443\" ) time . sleep ( 3 ) except KeyboardInterrupt : sock . close () break client.py \u041a\u043b\u0438\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0435\u043c\u0443 \u043f\u0440\u0438\u0432\u0435\u0442 import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '127.0.0.1' , 9090 )) sock . send ( b \"Hello, server \\n \" ) data = sock . recv ( 16384 ) res = data . decode ( 'utf-8' ) print ( res ) sock . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 server.py \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0438\u0445 \u0441\u043e\u0432\u0435\u0440\u0430\u0435\u0448 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0437\u0430\u0434 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 import numbers import socket , time sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 9090 )) sock . listen ( 1 ) sock . setblocking ( False ) print ( \"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \\n \u0421\u0435\u0440\u0432\u0435\u0440 \u0436\u0434\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\" ) while True : try : clientsocket , address = sock . accept () data = clientsocket . recv ( 16384 ) numbers = data . decode ( \"utf-8\" ) numbers = numbers . split () answer = int ( numbers [ 0 ]) * int ( numbers [ 1 ]) answer = str ( answer ) . encode ( 'utf-8' ) clientsocket . send ( answer ) clientsocket . close () break except socket . error : print ( \"\u0416\u0434\u0443\" ) time . sleep ( 3 ) except KeyboardInterrupt : clientsocket . close () break client.py \u041a\u043b\u0438\u0435\u043d\u0442 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430\u0448\u0443 \u043f\u043b\u043e\u0449\u0430\u0434\u044c import socket str = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0438 \u0432\u044b\u0441\u043e\u0442\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430: \" ) str = str . encode ( 'utf-8' ) sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '127.0.0.1' , 9090 )) sock . send ( str ) data = sock . recv ( 16384 ) res = data . decode ( 'utf-8' ) print ( f '\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 { res } ' ) sock . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u043e \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u043d\u0435\u0433\u043e \u043d\u0430\u0448\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043b\u0435\u0436\u0438\u0442 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 import socket import time sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = '127.0.0.1' port = 9090 sock . bind (( host , port )) sock . setblocking ( False ) print ( \"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\" , host , port ) sock . listen ( 3 ) while True : try : clientsocket , ( client_host , client_port ) = sock . accept () print ( 'Got connection from' , client_host , client_port ) data = clientsocket . recv ( 16384 ) HDRS = 'HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n ' body = \"\"\" <html> <body> <h1>Hello world!</h1> </body> </html> \"\"\" response = HDRS + body clientsocket . send ( response . encode ( 'utf-8' )) clientsocket . close () break except socket . error : print ( \"\u0416\u0434\u0443\" ) time . sleep ( 3 ) except KeyboardInterrupt : clientsocket . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py \u0421\u0435\u0440\u0432\u0435\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u043c\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430 \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 import socket from threading import Thread HOST = \"127.0.0.1\" PORT = 9090 clients = [] sock = socket . socket () sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) sock . bind (( HOST , PORT )) sock . listen ( 10 ) print ( f \"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d { HOST } : { PORT } \" ) def listen_for_client ( people ): while True : try : message = people . recv ( 1024 ) . decode () except Exception as e : print ( f \"[!] \u041e\u0448\u0438\u0431\u043a\u0430: { e } \" ) clients . pop ( people ) else : message = message . replace ( \" \" , \": \" ) for client in clients : client . send ( message . encode ()) while True : client , ( port , host ) = sock . accept () print ( f \"\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d { port } : { host } .\" ) clients . append ( client ) thread = Thread ( target = listen_for_client , args = ( client ,)) thread . daemon = True thread . start () client.py \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0433\u0434\u0435 \u043c\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u0436\u0435 \u0442\u043e\u0442 \u0440\u0430\u0437\u043e\u0441\u043b\u0430\u043b \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c import datetime import socket from threading import Thread HOST = \"127.0.0.1\" PORT = 9090 sock = socket . socket () sock . connect (( HOST , PORT )) print ( f \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a { HOST } : { PORT } \" ) name = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0432\u043e\u0451 \u0438\u043c\u044f: \" ) def listen_for_messages (): while True : message = sock . recv ( 1024 ) . decode () print ( \" \\n \" + message ) thread = Thread ( target = listen_for_messages ) thread . daemon = True thread . start () while True : text = input () if text . lower () == 'q' : break date_now = datetime . datetime . now () . strftime ( '%Y-%m- %d %H:%M' ) text = f ' { date_now } { name } { text } ' sock . send ( text . encode ()) sock . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py \u0421\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \"\u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\", \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u043a\u0430 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435 \u0435\u0435 \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0433 \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0431\u044b\u043b\u0438 \u0443\u0436\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b import socket class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( self . host , self . port )) sock . listen ( 5 ) while True : clientsocket , _ = sock . accept () self . serve_client ( clientsocket ) def serve_client ( self , clientsocket ): data = clientsocket . recv ( 16384 ) data = data . decode ( 'utf-8' ) target , method = self . parse_request ( data ) headers , body = self . parse_headers ( data ) resp = self . handle_request ( target , method , body ) if resp : self . send_response ( clientsocket , resp ) def parse_request ( self , data ): data = data . replace ( ' \\r ' , '' ) lines = data . split ( ' \\n ' ) method , target , protocol = lines [ 0 ] . split () return target , method def parse_headers ( self , data ): data = data . replace ( ' \\r ' , '' ) lines = data . split ( ' \\n ' ) i = lines . index ( '' ) headers = lines [ 1 : i ] body = lines [ - 1 ] return headers , body def handle_request ( self , target , method , body ): if target == \"/\" : if method == \"GET\" : resp = \"HTTP/1.1 200 OK \\n\\n \" with open ( 'index.html' ) as f : resp += f . read () return resp if method == \"POST\" : newbody = body . split ( '&' ) for a in newbody : if a . split ( '=' )[ 0 ] == 'subject' : subjects . append ( a . split ( '=' )[ 1 ]) if a . split ( '=' )[ 0 ] == 'mark' : marks . append ( a . split ( '=' )[ 1 ]) resp = \"HTTP/1.1 200 OK \\n\\n \" resp += \"<html><head><title>Journal</title></head><body>\" for s , m in zip ( subjects , marks ): resp += f \"<p> { s } : { m } </p>\" resp += \"</body></html>\" return resp def send_response ( self , clientsocket , resp ): clientsocket . send ( resp . encode ( 'utf-8' )) if __name__ == '__main__' : host = 'localhost' port = 9090 serv = MyHTTPServer ( host , port ) subjects = [] marks = [] try : serv . serve_forever () except KeyboardInterrupt : pass index.html \u041f\u0440\u043e\u0441\u0442\u043e\u0439 HTML \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py \u0421\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0436\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0435\u043c\u0443 \u043f\u0440\u0438\u0432\u0435\u0442 import socket , time sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 9090 )) sock . listen ( 1 ) sock . setblocking ( False ) print ( \"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \\n \u0421\u0435\u0440\u0432\u0435\u0440 \u0436\u0434\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\" ) while True : try : clientsocket , address = sock . accept () data = clientsocket . recv ( 16384 ) udata = data . decode ( \"utf-8\" ) print ( udata ) HDRS = 'HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n ' msg = 'Hello, client' . encode ( 'utf-8' ) clientsocket . send ( HDRS . encode ( 'utf-8' ) + msg ) sock . close () break except socket . error : print ( \"\u0416\u0434\u0443\" ) time . sleep ( 3 ) except KeyboardInterrupt : sock . close () break client.py \u041a\u043b\u0438\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0435\u043c\u0443 \u043f\u0440\u0438\u0432\u0435\u0442 import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '127.0.0.1' , 9090 )) sock . send ( b \"Hello, server \\n \" ) data = sock . recv ( 16384 ) res = data . decode ( 'utf-8' ) print ( res ) sock . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 server.py \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0438\u0445 \u0441\u043e\u0432\u0435\u0440\u0430\u0435\u0448 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0437\u0430\u0434 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 import numbers import socket , time sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 9090 )) sock . listen ( 1 ) sock . setblocking ( False ) print ( \"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \\n \u0421\u0435\u0440\u0432\u0435\u0440 \u0436\u0434\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\" ) while True : try : clientsocket , address = sock . accept () data = clientsocket . recv ( 16384 ) numbers = data . decode ( \"utf-8\" ) numbers = numbers . split () answer = int ( numbers [ 0 ]) * int ( numbers [ 1 ]) answer = str ( answer ) . encode ( 'utf-8' ) clientsocket . send ( answer ) clientsocket . close () break except socket . error : print ( \"\u0416\u0434\u0443\" ) time . sleep ( 3 ) except KeyboardInterrupt : clientsocket . close () break client.py \u041a\u043b\u0438\u0435\u043d\u0442 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430\u0448\u0443 \u043f\u043b\u043e\u0449\u0430\u0434\u044c import socket str = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0438 \u0432\u044b\u0441\u043e\u0442\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430: \" ) str = str . encode ( 'utf-8' ) sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '127.0.0.1' , 9090 )) sock . send ( str ) data = sock . recv ( 16384 ) res = data . decode ( 'utf-8' ) print ( f '\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 { res } ' ) sock . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u043e \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u043d\u0435\u0433\u043e \u043d\u0430\u0448\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043b\u0435\u0436\u0438\u0442 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 import socket import time sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = '127.0.0.1' port = 9090 sock . bind (( host , port )) sock . setblocking ( False ) print ( \"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\" , host , port ) sock . listen ( 3 ) while True : try : clientsocket , ( client_host , client_port ) = sock . accept () print ( 'Got connection from' , client_host , client_port ) data = clientsocket . recv ( 16384 ) HDRS = 'HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n ' body = \"\"\" <html> <body> <h1>Hello world!</h1> </body> </html> \"\"\" response = HDRS + body clientsocket . send ( response . encode ( 'utf-8' )) clientsocket . close () break except socket . error : print ( \"\u0416\u0434\u0443\" ) time . sleep ( 3 ) except KeyboardInterrupt : clientsocket . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py \u0421\u0435\u0440\u0432\u0435\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u043c\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430 \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 import socket from threading import Thread HOST = \"127.0.0.1\" PORT = 9090 clients = [] sock = socket . socket () sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) sock . bind (( HOST , PORT )) sock . listen ( 10 ) print ( f \"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d { HOST } : { PORT } \" ) def listen_for_client ( people ): while True : try : message = people . recv ( 1024 ) . decode () except Exception as e : print ( f \"[!] \u041e\u0448\u0438\u0431\u043a\u0430: { e } \" ) clients . pop ( people ) else : message = message . replace ( \" \" , \": \" ) for client in clients : client . send ( message . encode ()) while True : client , ( port , host ) = sock . accept () print ( f \"\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d { port } : { host } .\" ) clients . append ( client ) thread = Thread ( target = listen_for_client , args = ( client ,)) thread . daemon = True thread . start () client.py \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0433\u0434\u0435 \u043c\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u0436\u0435 \u0442\u043e\u0442 \u0440\u0430\u0437\u043e\u0441\u043b\u0430\u043b \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c import datetime import socket from threading import Thread HOST = \"127.0.0.1\" PORT = 9090 sock = socket . socket () sock . connect (( HOST , PORT )) print ( f \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a { HOST } : { PORT } \" ) name = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0432\u043e\u0451 \u0438\u043c\u044f: \" ) def listen_for_messages (): while True : message = sock . recv ( 1024 ) . decode () print ( \" \\n \" + message ) thread = Thread ( target = listen_for_messages ) thread . daemon = True thread . start () while True : text = input () if text . lower () == 'q' : break date_now = datetime . datetime . now () . strftime ( '%Y-%m- %d %H:%M' ) text = f ' { date_now } { name } { text } ' sock . send ( text . encode ()) sock . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py \u0421\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \"\u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\", \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u043a\u0430 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435 \u0435\u0435 \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0433 \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0431\u044b\u043b\u0438 \u0443\u0436\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b import socket class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( self . host , self . port )) sock . listen ( 5 ) while True : clientsocket , _ = sock . accept () self . serve_client ( clientsocket ) def serve_client ( self , clientsocket ): data = clientsocket . recv ( 16384 ) data = data . decode ( 'utf-8' ) target , method = self . parse_request ( data ) headers , body = self . parse_headers ( data ) resp = self . handle_request ( target , method , body ) if resp : self . send_response ( clientsocket , resp ) def parse_request ( self , data ): data = data . replace ( ' \\r ' , '' ) lines = data . split ( ' \\n ' ) method , target , protocol = lines [ 0 ] . split () return target , method def parse_headers ( self , data ): data = data . replace ( ' \\r ' , '' ) lines = data . split ( ' \\n ' ) i = lines . index ( '' ) headers = lines [ 1 : i ] body = lines [ - 1 ] return headers , body def handle_request ( self , target , method , body ): if target == \"/\" : if method == \"GET\" : resp = \"HTTP/1.1 200 OK \\n\\n \" with open ( 'index.html' ) as f : resp += f . read () return resp if method == \"POST\" : newbody = body . split ( '&' ) for a in newbody : if a . split ( '=' )[ 0 ] == 'subject' : subjects . append ( a . split ( '=' )[ 1 ]) if a . split ( '=' )[ 0 ] == 'mark' : marks . append ( a . split ( '=' )[ 1 ]) resp = \"HTTP/1.1 200 OK \\n\\n \" resp += \"<html><head><title>Journal</title></head><body>\" for s , m in zip ( subjects , marks ): resp += f \"<p> { s } : { m } </p>\" resp += \"</body></html>\" return resp def send_response ( self , clientsocket , resp ): clientsocket . send ( resp . encode ( 'utf-8' )) if __name__ == '__main__' : host = 'localhost' port = 9090 serv = MyHTTPServer ( host , port ) subjects = [] marks = [] try : serv . serve_forever () except KeyboardInterrupt : pass index.html \u041f\u0440\u043e\u0441\u0442\u043e\u0439 HTML \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u0438\u044f account_created.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Notification </ title > < style > body { padding : 20 px ; padding-left : 50 px ; } </ style > </ head > < body > < p > The account created successfully! </ p > < p > Please enter your personal information to start working. </ p > < nav > < a href = {{edit_link}} >< strong > Go! </ strong ></ a > | < a href = \"/profile/\" > Later </ a > </ nav > </ body > </ html > all_tasks.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Tasks </ title > < style > body { padding-left : 50 px ; } ul { list-style-type : none ; margin : 0 ; padding : 0 ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = \"/accounts/{{user.id}}/update/\" > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < div class = \"main\" > < br > < ul > {% for task in task_list %} < li > Deadline: {{task.deadline}} </ li > < li > Subject: {{task.subject}} </ li > < li > Task: {{task.task_text}} </ li > {% if task.id in hw_ids %} {% for answer in answers %} {% if answer.homework_id == task.id %} < p > Mark: {{ answer.mark }} </ p > {% endif %} {% endfor %} {% else %} < p >< a href = \"/profile/all_tasks/answer?task_id={{task.id}}\" > Solve the task </ a >< br ></ p > {% endif %} < hr /> {% empty %} < p > No tasks yet. </ p > {% endfor %} </ ul > </ div > </ body > </ html > class_marks.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Class marks </ title > < style > body { padding-left : 50 px ; } table { border-top : 4 px solid #000 ; border-collapse : collapse ; text-align : center ; } caption { text-align : left ; padding : 10 px ; } thead { border-bottom : 4 px solid #000 ; } tbody td { text-align : left ; padding-left : 5 ; } tbody td : last-child { text-align : center ; } td , th { border : 1 px solid #000 ; padding : 10 px ; vertical-align : middle ; line-height : 1.2 ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = \"/accounts/{{user.id}}/update/\" > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < table > < caption > Class: {{ user.group }} < br > Subject: {{ subject }} </ caption > < thead > < tr > < th > Student </ th > < th > Marks </ th > < th > Average </ th > </ tr > </ thead > < tbody > {% for student in class_students %} < tr > < td > {{student.surname}} {{student.name}} {{student.patronymic}} </ td > {% for mark in marks %} {% if forloop.counter == forloop.parentloop.counter %} < td > {{ mark }} </ td > {% endif %} {% endfor %} {% for grade in average %} {% if forloop.counter == forloop.parentloop.counter %} < td > {{ grade }} </ td > {% endif %} {% endfor %} </ tr > {% endfor %} </ tbody > </ table > < br > < a href = \"/profile/class_marks/subject_select\" > Select another subject </ a > </ body > </ html > profile_page.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Home </ title > < style > body { padding-left : 50 px ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = {{edit_link}} > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > {% if user.name == '' %} < p > Hello, {{ user.username }}! </ p > {% else %} < p > Hello, {{ user.name }}! </ p > {% endif %} </ body > </ html > solution.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Answer </ title > < style > body { padding-left : 50 px ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = \"/accounts/{{user.id}}/update/\" > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < p > Task: {{ task.task_text }} </ p > < form method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Send solution\" > </ form > </ body > </ html > start_page.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Start page </ title > < style > body { padding : 20 px ; padding-left : 50 px ; } </ style > </ head > < body > < p > Welcome to the Homework Board! </ p > < p > Please login or sign up to get started. </ p > < nav > < a href = \"/accounts/login/\" > Log in </ a > | < a href = \"/admin/login/\" > Log in as a teacher </ a > | < a href = \"/accounts/signup/\" > Sign up </ a > </ nav > </ body > </ html > subject_select.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Subject select </ title > < style > body { padding-left : 50 px ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = \"/accounts/{{user.id}}/update/\" > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < p > Click on the subject below to view class marks for it: </ p > {% for subject in subjects %} < a href = \"/profile/class_marks?subject={{subject}}\" > {{ subject }} </ a >< br > < br > {% endfor %} </ body > </ html > user_update.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > User update </ title > < style > body { padding-left : 50 px ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = {{edit_link}} > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < p > Enter your personal information. </ p > < p > User: {{object.username}} </ p > < form method = \"POST\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Save\" > </ form > </ body > </ html > settings.py \"\"\" Django settings for homework_board project. Generated by 'django-admin startproject' using Django 4.1.2. For more information on this file, see https://docs.djangoproject.com/en/4.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/4.1/ref/settings/ \"\"\" from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path ( __file__ ) . resolve () . parent . parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'django-insecure-7 %i i_szc&3vfg5($#nij*29(p#%!h!e0stc*7clee%!ja)(1)c' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.sites' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'allauth' , 'allauth.account' , 'allauth.socialaccount' , 'board_app' , ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , 'django.middleware.csrf.CsrfViewMiddleware' , 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ] ROOT_URLCONF = 'homework_board.urls' TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [ BASE_DIR / 'templates' ], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] WSGI_APPLICATION = 'homework_board.wsgi.application' # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.sqlite3' , 'NAME' : BASE_DIR / 'db.sqlite3' , } } # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME' : 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator' , }, { 'NAME' : 'django.contrib.auth.password_validation.MinimumLengthValidator' , }, { 'NAME' : 'django.contrib.auth.password_validation.CommonPasswordValidator' , }, { 'NAME' : 'django.contrib.auth.password_validation.NumericPasswordValidator' , }, ] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True SITE_ID = 1 # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field typex # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' AUTH_USER_MODEL = 'board_app.User' AUTHENTICATION_BACKENDS = [ # Needed to login by username in Django admin, regardless of `allauth` 'django.contrib.auth.backends.ModelBackend' , # `allauth` specific authentication methods, such as login by e-mail 'allauth.account.auth_backends.AuthenticationBackend' , ] LOGIN_REDIRECT_URL = '/profile/' LOGIN_URL = '/accounts/login/' ACCOUNT_EMAIL_VERIFICATION = 'none' ACCOUNT_SIGNUP_REDIRECT_URL = '/accounts/created/' urls.py \"\"\"homework_board URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/4.1/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path('', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path('', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path('blog/', include('blog.urls')) \"\"\" from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'accounts/' , include ( 'allauth.urls' )), path ( '' , include ( 'board_app.urls' )), ] admin.py from django.contrib import admin from .models import Homework , TaskCompletion , User admin . site . register ( Homework ) admin . site . register ( TaskCompletion ) admin . site . register ( User ) apps.py from django.apps import AppConfig class BoardAppConfig ( AppConfig ): default_auto_field = 'django.db.models.BigAutoField' name = 'board_app' forms.py from django import forms from .models import TaskCompletion class SolutionForm ( forms . ModelForm ): class Meta : model = TaskCompletion fields = [ 'answer' ] widgets = { 'answer' : forms . Textarea ( attrs = { 'maxlength' : 500 , 'cols' : 44 , 'required' : 'true' }), } def __init__ ( self , task , user , subject , task_text , * args , ** kwargs ): super ( SolutionForm , self ) . __init__ ( * args , ** kwargs ) self . homework = task self . student = user self . subject = subject self . task_text = task_text def save ( self , commit = True ): instance = super ( SolutionForm , self ) . save ( commit = False ) if not instance . homework_id : instance . homework = self . homework instance . student = self . student instance . subject = self . subject instance . task_text = self . task_text if commit : instance . save () return instance models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.conf import settings CLASSES_LIST = ( ( '1-A' , '1-A' ), ( '1-B' , '1-B' ), ( '2-A' , '2-A' ), ( '2-B' , '2-B' ), ( '3-A' , '3-A' ), ( '3-B' , '3-B' ), ) class User ( AbstractUser ): surname = models . CharField ( max_length = 30 ) name = models . CharField ( max_length = 30 ) patronymic = models . CharField ( max_length = 30 , blank = True ) birthday = models . DateField ( blank = True , null = True ) group = models . CharField ( max_length = 4 , choices = CLASSES_LIST ) class Homework ( models . Model ): subject = models . CharField ( max_length = 20 ) group = models . CharField ( max_length = 4 , choices = CLASSES_LIST , blank = True ) teacher = models . CharField ( max_length = 50 ) start_date = models . DateField () deadline = models . DateField () task_text = models . CharField ( max_length = 100 ) penalty_info = models . CharField ( max_length = 100 ) student = models . ManyToManyField ( settings . AUTH_USER_MODEL , through = 'TaskCompletion' ) class TaskCompletion ( models . Model ): MARKS_LIST = ( ( '-' , '-' ), ( '2' , '2' ), ( '3' , '3' ), ( '4' , '4' ), ( '5' , '5' ), ) student = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) homework = models . ForeignKey ( Homework , on_delete = models . CASCADE ) subject = models . CharField ( max_length = 20 , blank = True ) task_text = models . CharField ( max_length = 100 , blank = True ) answer = models . CharField ( max_length = 100 ) mark = models . CharField ( max_length = 1 , choices = MARKS_LIST , blank = False , default = '-' ) urls.py from django.urls import path from . import views urlpatterns = [ path ( '' , views . StartPageView . as_view ()), path ( 'accounts/created/' , views . NotificationView . as_view ()), path ( 'accounts/<int:pk>/update/' , views . StudentUpdate . as_view ()), path ( 'profile/' , views . ProfilePageView . as_view ()), path ( 'profile/all_tasks/' , views . AllTasks . as_view ()), path ( 'profile/all_tasks/answer' , views . solution_create ), path ( 'profile/class_marks/subject_select' , views . subject_select ), path ( 'profile/class_marks' , views . class_marks ), ] views.py from django.shortcuts import render from .models import User , Homework , TaskCompletion , CLASSES_LIST from django.views.generic import TemplateView , ListView , UpdateView from django.contrib.auth.mixins import LoginRequiredMixin from .forms import SolutionForm from django.shortcuts import redirect from django.contrib.auth.decorators import login_required class StartPageView ( TemplateView ): def get ( self , request ): return render ( request , 'board_app/start_page.html' ) class NotificationView ( LoginRequiredMixin , TemplateView ): login_url = '/accounts/login/' def get ( self , request ): context = {} context [ \"edit_link\" ] = f \"/accounts/ { self . request . user . id } /update/\" return render ( request , 'board_app/account_created.html' , context ) class StudentUpdate ( LoginRequiredMixin , UpdateView ): login_url = '/accounts/login/' model = User template_name = 'board_app/user_update.html' fields = [ \"surname\" , \"name\" , \"patronymic\" , \"birthday\" , \"group\" ] success_url = '/profile/' class ProfilePageView ( LoginRequiredMixin , TemplateView ): login_url = '/accounts/login/' def get ( self , request ): context = {} context [ \"edit_link\" ] = f \"/accounts/ { self . request . user . id } /update/\" context [ \"user\" ] = self . request . user return render ( request , 'board_app/profile_page.html' , context ) class AllTasks ( LoginRequiredMixin , ListView ): login_url = '/accounts/login/' def get ( self , request ): user = self . request . user if ( user . group , user . group ) not in CLASSES_LIST : return redirect ( f \"/accounts/ { request . user . id } /update/\" ) context = {} context [ 'user' ] = user context [ 'task_list' ] = Homework . objects . filter ( group = user . group ) answers = TaskCompletion . objects . filter ( student_id = user . id ) context [ 'answers' ] = answers context [ 'hw_ids' ] = [] for answer in answers : context [ 'hw_ids' ] . append ( answer . homework_id ) return render ( request , 'board_app/all_tasks.html' , context ) @login_required def solution_create ( request ): task_id = request . GET . get ( 'task_id' ) task = Homework . objects . get ( pk = task_id ) context = {} context [ \"user\" ] = request . user if request . method == 'POST' : form = SolutionForm ( task , request . user , task . subject , task . task_text , request . POST ) if form . is_valid (): form . save () return redirect ( '/profile/all_tasks/' ) else : form = SolutionForm ( task , request . user , task . subject , task . task_text ) context [ \"form\" ] = form context [ \"task\" ] = Homework . objects . get ( pk = task_id ) return render ( request , 'board_app/solution.html' , context ) @login_required def subject_select ( request ): user = request . user if ( user . group , user . group ) not in CLASSES_LIST : return redirect ( f \"/accounts/ { request . user . id } /update/\" ) context = {} context [ 'user' ] = user hw_list = Homework . objects . filter ( group = user . group ) context [ 'subjects' ] = [] for hw in hw_list : if hw . subject not in context [ 'subjects' ]: context [ 'subjects' ] . append ( hw . subject ) return render ( request , 'board_app/subject_select.html' , context ) @login_required def class_marks ( request ): context = {} user = request . user context [ 'user' ] = user class_students = User . objects . filter ( group = user . group ) class_students = class_students . order_by ( 'surname' , 'name' , 'patronymic' ) context [ 'class_students' ] = class_students subject = request . GET . get ( 'subject' ) context [ 'subject' ] = subject context [ 'marks' ] = [] context [ 'average' ] = [] for student in class_students : tasks_done = TaskCompletion . objects . filter ( student_id = student . id , subject = subject ) marks = '' marks_sum = 0 n = 0 for index , task in enumerate ( tasks_done ): marks += task . mark if index != len ( tasks_done ) - 1 : marks += ', ' if task . mark in '2345' : marks_sum += int ( task . mark ) n += 1 context [ 'marks' ] . append ( marks ) if n != 0 : context [ 'average' ] . append ( round (( marks_sum / n ), 2 )) else : context [ 'average' ] . append ( '' ) return render ( request , 'board_app/class_marks.html' , context )","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#no2-django","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u0438\u044f account_created.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Notification </ title > < style > body { padding : 20 px ; padding-left : 50 px ; } </ style > </ head > < body > < p > The account created successfully! </ p > < p > Please enter your personal information to start working. </ p > < nav > < a href = {{edit_link}} >< strong > Go! </ strong ></ a > | < a href = \"/profile/\" > Later </ a > </ nav > </ body > </ html > all_tasks.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Tasks </ title > < style > body { padding-left : 50 px ; } ul { list-style-type : none ; margin : 0 ; padding : 0 ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = \"/accounts/{{user.id}}/update/\" > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < div class = \"main\" > < br > < ul > {% for task in task_list %} < li > Deadline: {{task.deadline}} </ li > < li > Subject: {{task.subject}} </ li > < li > Task: {{task.task_text}} </ li > {% if task.id in hw_ids %} {% for answer in answers %} {% if answer.homework_id == task.id %} < p > Mark: {{ answer.mark }} </ p > {% endif %} {% endfor %} {% else %} < p >< a href = \"/profile/all_tasks/answer?task_id={{task.id}}\" > Solve the task </ a >< br ></ p > {% endif %} < hr /> {% empty %} < p > No tasks yet. </ p > {% endfor %} </ ul > </ div > </ body > </ html > class_marks.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Class marks </ title > < style > body { padding-left : 50 px ; } table { border-top : 4 px solid #000 ; border-collapse : collapse ; text-align : center ; } caption { text-align : left ; padding : 10 px ; } thead { border-bottom : 4 px solid #000 ; } tbody td { text-align : left ; padding-left : 5 ; } tbody td : last-child { text-align : center ; } td , th { border : 1 px solid #000 ; padding : 10 px ; vertical-align : middle ; line-height : 1.2 ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = \"/accounts/{{user.id}}/update/\" > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < table > < caption > Class: {{ user.group }} < br > Subject: {{ subject }} </ caption > < thead > < tr > < th > Student </ th > < th > Marks </ th > < th > Average </ th > </ tr > </ thead > < tbody > {% for student in class_students %} < tr > < td > {{student.surname}} {{student.name}} {{student.patronymic}} </ td > {% for mark in marks %} {% if forloop.counter == forloop.parentloop.counter %} < td > {{ mark }} </ td > {% endif %} {% endfor %} {% for grade in average %} {% if forloop.counter == forloop.parentloop.counter %} < td > {{ grade }} </ td > {% endif %} {% endfor %} </ tr > {% endfor %} </ tbody > </ table > < br > < a href = \"/profile/class_marks/subject_select\" > Select another subject </ a > </ body > </ html > profile_page.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Home </ title > < style > body { padding-left : 50 px ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = {{edit_link}} > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > {% if user.name == '' %} < p > Hello, {{ user.username }}! </ p > {% else %} < p > Hello, {{ user.name }}! </ p > {% endif %} </ body > </ html > solution.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Answer </ title > < style > body { padding-left : 50 px ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = \"/accounts/{{user.id}}/update/\" > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < p > Task: {{ task.task_text }} </ p > < form method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Send solution\" > </ form > </ body > </ html > start_page.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Start page </ title > < style > body { padding : 20 px ; padding-left : 50 px ; } </ style > </ head > < body > < p > Welcome to the Homework Board! </ p > < p > Please login or sign up to get started. </ p > < nav > < a href = \"/accounts/login/\" > Log in </ a > | < a href = \"/admin/login/\" > Log in as a teacher </ a > | < a href = \"/accounts/signup/\" > Sign up </ a > </ nav > </ body > </ html > subject_select.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Subject select </ title > < style > body { padding-left : 50 px ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = \"/accounts/{{user.id}}/update/\" > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < p > Click on the subject below to view class marks for it: </ p > {% for subject in subjects %} < a href = \"/profile/class_marks?subject={{subject}}\" > {{ subject }} </ a >< br > < br > {% endfor %} </ body > </ html > user_update.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > User update </ title > < style > body { padding-left : 50 px ; } </ style > </ head > < header > < nav class = \"menu\" > < br > < a href = \"/profile/\" > Home </ a > | < a href = \"/profile/all_tasks/\" > Tasks </ a > | < a href = \"/profile/class_marks/subject_select\" > Class marks </ a > | < a href = {{edit_link}} > Edit profile </ a > | < a href = \"/accounts/logout/\" > Log out </ a >< br > < br > </ nav > </ header > < body > < p > Enter your personal information. </ p > < p > User: {{object.username}} </ p > < form method = \"POST\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Save\" > </ form > </ body > </ html > settings.py \"\"\" Django settings for homework_board project. Generated by 'django-admin startproject' using Django 4.1.2. For more information on this file, see https://docs.djangoproject.com/en/4.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/4.1/ref/settings/ \"\"\" from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path ( __file__ ) . resolve () . parent . parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'django-insecure-7 %i i_szc&3vfg5($#nij*29(p#%!h!e0stc*7clee%!ja)(1)c' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.sites' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'allauth' , 'allauth.account' , 'allauth.socialaccount' , 'board_app' , ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , 'django.middleware.csrf.CsrfViewMiddleware' , 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ] ROOT_URLCONF = 'homework_board.urls' TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [ BASE_DIR / 'templates' ], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] WSGI_APPLICATION = 'homework_board.wsgi.application' # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.sqlite3' , 'NAME' : BASE_DIR / 'db.sqlite3' , } } # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME' : 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator' , }, { 'NAME' : 'django.contrib.auth.password_validation.MinimumLengthValidator' , }, { 'NAME' : 'django.contrib.auth.password_validation.CommonPasswordValidator' , }, { 'NAME' : 'django.contrib.auth.password_validation.NumericPasswordValidator' , }, ] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True SITE_ID = 1 # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field typex # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' AUTH_USER_MODEL = 'board_app.User' AUTHENTICATION_BACKENDS = [ # Needed to login by username in Django admin, regardless of `allauth` 'django.contrib.auth.backends.ModelBackend' , # `allauth` specific authentication methods, such as login by e-mail 'allauth.account.auth_backends.AuthenticationBackend' , ] LOGIN_REDIRECT_URL = '/profile/' LOGIN_URL = '/accounts/login/' ACCOUNT_EMAIL_VERIFICATION = 'none' ACCOUNT_SIGNUP_REDIRECT_URL = '/accounts/created/' urls.py \"\"\"homework_board URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/4.1/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path('', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path('', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path('blog/', include('blog.urls')) \"\"\" from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'accounts/' , include ( 'allauth.urls' )), path ( '' , include ( 'board_app.urls' )), ] admin.py from django.contrib import admin from .models import Homework , TaskCompletion , User admin . site . register ( Homework ) admin . site . register ( TaskCompletion ) admin . site . register ( User ) apps.py from django.apps import AppConfig class BoardAppConfig ( AppConfig ): default_auto_field = 'django.db.models.BigAutoField' name = 'board_app' forms.py from django import forms from .models import TaskCompletion class SolutionForm ( forms . ModelForm ): class Meta : model = TaskCompletion fields = [ 'answer' ] widgets = { 'answer' : forms . Textarea ( attrs = { 'maxlength' : 500 , 'cols' : 44 , 'required' : 'true' }), } def __init__ ( self , task , user , subject , task_text , * args , ** kwargs ): super ( SolutionForm , self ) . __init__ ( * args , ** kwargs ) self . homework = task self . student = user self . subject = subject self . task_text = task_text def save ( self , commit = True ): instance = super ( SolutionForm , self ) . save ( commit = False ) if not instance . homework_id : instance . homework = self . homework instance . student = self . student instance . subject = self . subject instance . task_text = self . task_text if commit : instance . save () return instance models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.conf import settings CLASSES_LIST = ( ( '1-A' , '1-A' ), ( '1-B' , '1-B' ), ( '2-A' , '2-A' ), ( '2-B' , '2-B' ), ( '3-A' , '3-A' ), ( '3-B' , '3-B' ), ) class User ( AbstractUser ): surname = models . CharField ( max_length = 30 ) name = models . CharField ( max_length = 30 ) patronymic = models . CharField ( max_length = 30 , blank = True ) birthday = models . DateField ( blank = True , null = True ) group = models . CharField ( max_length = 4 , choices = CLASSES_LIST ) class Homework ( models . Model ): subject = models . CharField ( max_length = 20 ) group = models . CharField ( max_length = 4 , choices = CLASSES_LIST , blank = True ) teacher = models . CharField ( max_length = 50 ) start_date = models . DateField () deadline = models . DateField () task_text = models . CharField ( max_length = 100 ) penalty_info = models . CharField ( max_length = 100 ) student = models . ManyToManyField ( settings . AUTH_USER_MODEL , through = 'TaskCompletion' ) class TaskCompletion ( models . Model ): MARKS_LIST = ( ( '-' , '-' ), ( '2' , '2' ), ( '3' , '3' ), ( '4' , '4' ), ( '5' , '5' ), ) student = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) homework = models . ForeignKey ( Homework , on_delete = models . CASCADE ) subject = models . CharField ( max_length = 20 , blank = True ) task_text = models . CharField ( max_length = 100 , blank = True ) answer = models . CharField ( max_length = 100 ) mark = models . CharField ( max_length = 1 , choices = MARKS_LIST , blank = False , default = '-' ) urls.py from django.urls import path from . import views urlpatterns = [ path ( '' , views . StartPageView . as_view ()), path ( 'accounts/created/' , views . NotificationView . as_view ()), path ( 'accounts/<int:pk>/update/' , views . StudentUpdate . as_view ()), path ( 'profile/' , views . ProfilePageView . as_view ()), path ( 'profile/all_tasks/' , views . AllTasks . as_view ()), path ( 'profile/all_tasks/answer' , views . solution_create ), path ( 'profile/class_marks/subject_select' , views . subject_select ), path ( 'profile/class_marks' , views . class_marks ), ] views.py from django.shortcuts import render from .models import User , Homework , TaskCompletion , CLASSES_LIST from django.views.generic import TemplateView , ListView , UpdateView from django.contrib.auth.mixins import LoginRequiredMixin from .forms import SolutionForm from django.shortcuts import redirect from django.contrib.auth.decorators import login_required class StartPageView ( TemplateView ): def get ( self , request ): return render ( request , 'board_app/start_page.html' ) class NotificationView ( LoginRequiredMixin , TemplateView ): login_url = '/accounts/login/' def get ( self , request ): context = {} context [ \"edit_link\" ] = f \"/accounts/ { self . request . user . id } /update/\" return render ( request , 'board_app/account_created.html' , context ) class StudentUpdate ( LoginRequiredMixin , UpdateView ): login_url = '/accounts/login/' model = User template_name = 'board_app/user_update.html' fields = [ \"surname\" , \"name\" , \"patronymic\" , \"birthday\" , \"group\" ] success_url = '/profile/' class ProfilePageView ( LoginRequiredMixin , TemplateView ): login_url = '/accounts/login/' def get ( self , request ): context = {} context [ \"edit_link\" ] = f \"/accounts/ { self . request . user . id } /update/\" context [ \"user\" ] = self . request . user return render ( request , 'board_app/profile_page.html' , context ) class AllTasks ( LoginRequiredMixin , ListView ): login_url = '/accounts/login/' def get ( self , request ): user = self . request . user if ( user . group , user . group ) not in CLASSES_LIST : return redirect ( f \"/accounts/ { request . user . id } /update/\" ) context = {} context [ 'user' ] = user context [ 'task_list' ] = Homework . objects . filter ( group = user . group ) answers = TaskCompletion . objects . filter ( student_id = user . id ) context [ 'answers' ] = answers context [ 'hw_ids' ] = [] for answer in answers : context [ 'hw_ids' ] . append ( answer . homework_id ) return render ( request , 'board_app/all_tasks.html' , context ) @login_required def solution_create ( request ): task_id = request . GET . get ( 'task_id' ) task = Homework . objects . get ( pk = task_id ) context = {} context [ \"user\" ] = request . user if request . method == 'POST' : form = SolutionForm ( task , request . user , task . subject , task . task_text , request . POST ) if form . is_valid (): form . save () return redirect ( '/profile/all_tasks/' ) else : form = SolutionForm ( task , request . user , task . subject , task . task_text ) context [ \"form\" ] = form context [ \"task\" ] = Homework . objects . get ( pk = task_id ) return render ( request , 'board_app/solution.html' , context ) @login_required def subject_select ( request ): user = request . user if ( user . group , user . group ) not in CLASSES_LIST : return redirect ( f \"/accounts/ { request . user . id } /update/\" ) context = {} context [ 'user' ] = user hw_list = Homework . objects . filter ( group = user . group ) context [ 'subjects' ] = [] for hw in hw_list : if hw . subject not in context [ 'subjects' ]: context [ 'subjects' ] . append ( hw . subject ) return render ( request , 'board_app/subject_select.html' , context ) @login_required def class_marks ( request ): context = {} user = request . user context [ 'user' ] = user class_students = User . objects . filter ( group = user . group ) class_students = class_students . order_by ( 'surname' , 'name' , 'patronymic' ) context [ 'class_students' ] = class_students subject = request . GET . get ( 'subject' ) context [ 'subject' ] = subject context [ 'marks' ] = [] context [ 'average' ] = [] for student in class_students : tasks_done = TaskCompletion . objects . filter ( student_id = student . id , subject = subject ) marks = '' marks_sum = 0 n = 0 for index , task in enumerate ( tasks_done ): marks += task . mark if index != len ( tasks_done ) - 1 : marks += ', ' if task . mark in '2345' : marks_sum += int ( task . mark ) n += 1 context [ 'marks' ] . append ( marks ) if n != 0 : context [ 'average' ] . append ( round (( marks_sum / n ), 2 )) else : context [ 'average' ] . append ( '' ) return render ( request , 'board_app/class_marks.html' , context )","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django."},{"location":"lr3/","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"pr3_1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1 Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models from django.contrib.auth.models import AbstractUser from django.db import models # Create your models here. class CarOwner ( models . Model ): id_owner = models . IntegerField ( primary_key = True ) last_name = models . CharField ( max_length = 30 , null = False ) first_name = models . CharField ( max_length = 30 , null = False ) birth_day = models . DateField ( null = True ) class Car ( models . Model ): id_car = models . IntegerField ( primary_key = True ) state_number = models . CharField ( max_length = 15 , null = False ) mark_car = models . CharField ( max_length = 20 , null = False ) model_car = models . CharField ( max_length = 20 , null = False ) color = models . CharField ( max_length = 30 , null = False ) class Ownership ( models . Model ): id_owner_car = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( CarOwner , on_delete = models . CASCADE , related_name = 'owner' ) id_car = models . ForeignKey ( Car , on_delete = models . CASCADE , related_name = 'car' ) start_date = models . DateField () end_date = models . DateField ( null = True ) class DriverLicense ( models . Model ): id_license = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( CarOwner , on_delete = models . CASCADE , related_name = 'car_owner' ) license_number = models . CharField ( max_length = 10 , null = False ) type = models . CharField ( max_length = 10 , null = False ) date_of_license = models . DateField () \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u0438\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u0438\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0430\u0432 \u0421\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f:","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"pr3_1/#no31","text":"Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"pr3_1/#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models from django.contrib.auth.models import AbstractUser from django.db import models # Create your models here. class CarOwner ( models . Model ): id_owner = models . IntegerField ( primary_key = True ) last_name = models . CharField ( max_length = 30 , null = False ) first_name = models . CharField ( max_length = 30 , null = False ) birth_day = models . DateField ( null = True ) class Car ( models . Model ): id_car = models . IntegerField ( primary_key = True ) state_number = models . CharField ( max_length = 15 , null = False ) mark_car = models . CharField ( max_length = 20 , null = False ) model_car = models . CharField ( max_length = 20 , null = False ) color = models . CharField ( max_length = 30 , null = False ) class Ownership ( models . Model ): id_owner_car = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( CarOwner , on_delete = models . CASCADE , related_name = 'owner' ) id_car = models . ForeignKey ( Car , on_delete = models . CASCADE , related_name = 'car' ) start_date = models . DateField () end_date = models . DateField ( null = True ) class DriverLicense ( models . Model ): id_license = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( CarOwner , on_delete = models . CASCADE , related_name = 'car_owner' ) license_number = models . CharField ( max_length = 10 , null = False ) type = models . CharField ( max_length = 10 , null = False ) date_of_license = models . DateField ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"pr3_1/#_1","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u0438\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u0438\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0430\u0432 \u0421\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439"},{"location":"pr3_1/#312","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435):","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"pr3_1/#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"},{"location":"warrior/","text":"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0432\u043e\u0438\u043d\u043e\u0432 URL : /api/warriors/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} { \"Warriors\" : [ { \"id\" : 1 , \"race\" : \"t\" , \"name\" : \"Petr2\" , \"level\" : 0 , \"profession\" : null , \"skill\" : [] }, { \"id\" : 2 , \"race\" : \"t\" , \"name\" : \"Petr\" , \"level\" : 0 , \"profession\" : null , \"skill\" : [] } ] }","title":"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0432\u043e\u0438\u043d\u043e\u0432"},{"location":"warrior/#_1","text":"URL : /api/warriors/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0432\u043e\u0438\u043d\u043e\u0432"},{"location":"warrior/#success-responses","text":"Code : 200 OK Content : {[]} { \"Warriors\" : [ { \"id\" : 1 , \"race\" : \"t\" , \"name\" : \"Petr2\" , \"level\" : 0 , \"profession\" : null , \"skill\" : [] }, { \"id\" : 2 , \"race\" : \"t\" , \"name\" : \"Petr\" , \"level\" : 0 , \"profession\" : null , \"skill\" : [] } ] }","title":"Success Responses"}]}